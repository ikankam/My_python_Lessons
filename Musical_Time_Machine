# This program scrapes billboard.com for songs in a particular year
# of your choosing and creates a spotify playlist to send you back in time.
# Great for anniversaries and celebrations.

import requests
import spotipy
from bs4 import BeautifulSoup
from spotipy.oauth2 import SpotifyOAuth
billboard_url = "https://www.billboard.com/charts/hot-100/"
Client_ID = "Your Client ID"
Client_Secret= "Your Client Secret"
redirect_URI="http://example.com"

#--------------------------------Scraping Billboard --------------------------------------------#
user_date = input("What year would you like to visit? Type the date in this format YYYY-MM-DD: ")

# Create the request to the billboard website
response = requests.get(url=f"{billboard_url}/{user_date}/")
billboard_response = response.text

# Make soup using the info you got from the website.
soup = BeautifulSoup(billboard_response,"html.parser")

# Tap into the section you want. Here, it will be the titles of songs.
song_titles=[song.getText().strip() for song in soup.select(selector="li #title-of-a-story")]

print (song_titles) # Prints the list of songs scraped.

#-------------------Spotify Authentication and token.txt creation ----------------------#
# Authenticate yourself on spotify
spotify_auth = spotipy.oauth2.SpotifyOAuth(client_id=Client_ID,
                               client_secret=Client_Secret,
                               redirect_uri=redirect_URI,
                               scope="playlist-modify-private",
                               show_dialog=True,
                               cache_path="token.txt"
                               )
spotify_auth.get_access_token(as_dict=False)
s = spotipy.Spotify(oauth_manager=spotify_auth)
user_id = s.current_user()["id"]
print (user_id) prints the User_ID

#--------------------Searching Spotify for the songs----------------------------#
# Searching spotify for songs by their titles and getting their uris
# Set a new empty list for the uris
song_uris = []
year = user_date.split("-")[0]
for song in song_titles:
    result = s.search(q=f"track:{song} year:{year}", type="track")
    # print(result) #Prints the result
    try:
        # Handling exception where the song cannot be found. It is skipped in this case.
        uri = result["tracks"]["items"][0]["uri"]
        song_uris.append(uri)
    except IndexError:
        print(f"{song} doesn't exist in Spotify. Skipped.")

print (song_uris) # You can verify song by visiting https://open.spotify.com/track/URI_ID_GENERATED
# Example :https://open.spotify.com/track/2y4lAQpi5VTNLu2ldeTdUH

#-----------------Creating new private playlist in Spotify--------------------------#
playlist = s.user_playlist_create(user_id,name=f"{user_date} Billboard 100",public=False, description="Musical Time Machine")
#print(playlist)

#---------------- Adding the songs to the playlist----------------------------#
s.playlist_add_items(playlist_id=playlist['id'], items=song_uris)

END RESULT IN SPOTIFY ACCOUNT:
![image](https://user-images.githubusercontent.com/95271274/171084728-bbe89be7-3948-4558-a6d7-0c137b9e950c.png)
